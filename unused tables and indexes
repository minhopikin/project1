SELECT 
  n.nspname AS schemaname,
  c.relname AS object_name,
  CASE 
    WHEN obj_description(c.oid, 'pg_class') IS NOT NULL THEN obj_description(c.oid, 'pg_class') 
    ELSE 'No description available' 
  END AS object_description,
  'table' AS object_type
FROM 
  pg_class c
JOIN 
  pg_namespace n ON c.relnamespace = n.oid
LEFT JOIN 
  pg_stat_user_tables ut ON c.oid = ut.relid
WHERE 
  c.relkind = 'r' -- Only tables
  AND ut.last_analyze IS NULL
ORDER BY 
  n.nspname,
  c.relname;
-----------------------------------------
SELECT
   schemaname || ',' || relname AS table_name,
   seq_scan,
   idx_scan,
   n_live_tup
FROM
   pg_stat_user_tables
WHERE
   seq_scan = 0
    AND idx_scan = 0
    AND n_live_tup > 0
ORDER BY
    n_live_tup DESC;
---------------------------------
--------unused index-----------
SELECT
  relname AS table,
  indexrelname AS index,
  pg_size_pretty(pg_relation_size(i.indexrelid)) AS index_size,
  idx_scan as index_scans
FROM pg_stat_user_indexes ui
JOIN pg_index i ON ui.indexrelid = i.indexrelid
WHERE NOT indisunique AND idx_scan =0 AND pg_relation_size(relid) > 5 * 8192
ORDER BY pg_relation_size(i.indexrelid) / nullif(idx_scan, 0) DESC NULLS FIRST,
pg_relation_size(i.indexrelid) DESC;

OR 

SELECT 
PSUI.indexrelid::regclass AS IndexName 
,PSUI.relid::regclass AS TableName 
FROM pg_stat_user_indexes AS PSUI 
JOIN pg_index AS PI 
ON PSUI.IndexRelid = PI.IndexRelid 
WHERE PSUI.idx_scan = 0 
AND PI.indisunique IS FALSE;
----------------------------------------
-----unused tables------------------------
--Checking the number of sequential and indexed access to the table gives a good hint if the table is in use or deprecated.  
--The following select statement retrieve the tables that might be deprecated.

Select relname from
pg_stat_user_tables
WHERE (idx_tup_fetch + seq_tup_read)= 0; -- you can define a threshold here

--OR
--2. Empty tables can be retrieved by checking the number of live tup i.e
Select relname from
pg_stat_user_tables
WHERE n_live_tup = 0; 
--OR
---3. table duplicates i.e the table can be found in more than one schema 

SELECT
n.nspname as "Schema",
c.relname as "Name" FROM pg_catalog.pg_class c
LEFT JOIN pg_catalog.pg_namespace n ON n.oid = c.relnamespace
WHERE c.relname IN (SELECT relname FROM pg_catalog.pg_class
WHERE relkind IN ('r')
GROUP BY relname
Having count(relname) > 1)
ORDER BY 2,1;
