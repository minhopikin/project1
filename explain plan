BEGIN
    -- Acquire row locks in a specific order to avoid deadlocks
    PERFORM 1 FROM recon.RAM_RISKGROUP_REPORT WHERE seq_revenue_id = i_seq_revenue_id FOR UPDATE;
    PERFORM 1 FROM recon.RAM_AGING_REPORT WHERE seq_revenue_id = i_seq_revenue_id FOR UPDATE;
    PERFORM 1 FROM recon.RAM_TRACKING_REPORT WHERE seq_revenue_id = i_seq_revenue_id FOR UPDATE;

    -- Perform deletions in a single transaction block
    DELETE FROM recon.RAM_RISKGROUP_REPORT WHERE seq_revenue_id = i_seq_revenue_id;
    DELETE FROM recon.RAM_AGING_REPORT WHERE seq_revenue_id = i_seq_revenue_id;
    DELETE FROM recon.RAM_TRACKING_REPORT WHERE seq_revenue_id = i_seq_revenue_id;

    -- Call procedures for updating after deletions
    CALL recon.insert_or_update_risk_group_report(i_seq_revenue_id, i_plan_name);
    RAISE NOTICE 'Updated Risk Group Report';

    CALL recon.insert_or_update_aging_report(i_seq_revenue_id, i_plan_name);
    RAISE NOTICE 'Updated Aging Report';

    CALL recon.insert_or_update_tracking_rpt_recon_status(i_seq_revenue_id, i_plan_name);
    RAISE NOTICE 'Updated Tracking Report System Status';

    CALL recon.insert_or_update_tracking_rpt_user_status(i_seq_revenue_id, i_plan_name);
    RAISE NOTICE 'Updated Tracking Report User Status';

END;
